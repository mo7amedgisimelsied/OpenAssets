version: '3.8'

services:
  # Database Service (MySQL)
  db:
    image: mysql:8
    # Define environment variables for the MySQL server
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: openassets-db
      MYSQL_USER: admin
      MYSQL_PASSWORD: 1234
    # Mount the db-dump directory to initialize the database with your dump.sql
    volumes:
      - ./db-dump:/docker-entrypoint-initdb.d/
    # Expose port 3307 on the host to access the database from outside the Docker network (optional but useful for local development/tools)
    ports:
      - "3307:3306"
    # Restart the container if it stops for any reason
    restart: unless-stopped

  # Backend Service (Spring Boot)
  backend:
    # Build the backend image from the Dockerfile located in the ./OpenAssets/Backend directory
    build: ./Backend # Corrected path to match your file structure
    # Map port 8080 from the container to port 8080 on the host
    ports:
      - "8080:8080"
    # Ensure the database is up and running before starting the backend
    depends_on:
      - db
    # Restart the container unless it's explicitly stopped
    restart: unless-stopped
    # Define environment variables for the Spring Boot application to connect to the database
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/openassets-db # 'db' is the service name for the database
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: 1234
      # If your Spring Boot app needs to know where its 'storage' is,
      # ensure this path is correctly used within your Spring Boot application.
      # For example, if your Spring Boot app reads/writes to /app/storage, this mapping works.
      # The host path should be relative to the docker-compose.yml file.
    volumes:
      - ./storage:/app/storage # Mount your storage directory for the backend to access files

  # Frontend Service (React)
  frontend:
    # Build the frontend image from the Dockerfile located in the ./OpenAssets/Frontend directory
    build: ./Frontend # Corrected path to match your file structure
    # Map port 80 from the container (where Nginx serves the app) to port 80 on the host
    ports:
      - "80:80" # This will make your React app accessible via http://localhost/
    # Ensure the backend is up before the frontend starts (useful if frontend makes API calls on load)
    depends_on:
      - backend
    # Restart the container unless it's explicitly stopped
    restart: unless-stopped
    # If your React app needs to know about the backend's URL, you might set it here.
    # However, with the Nginx proxy_pass, the frontend can call /api directly.
    # For example, if your React app needs an explicit API_URL environment variable:
    # environment:
    #   REACT_APP_API_URL: http://backend:8080 # This might be needed during React build
